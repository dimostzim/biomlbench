#!/bin/bash
#
# Setup script for AWS resources required by BioML-bench deployment
# This creates all the necessary AWS resources for the deployment system
#

set -e

echo "==================================="
echo "BioML-bench AWS Resources Setup"
echo "==================================="

# Configuration
SECURITY_GROUP_NAME="biomlbench-sg"
KEY_NAME="biomlbench-key"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Helper functions
log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Check if AWS CLI is installed
if ! command -v aws &> /dev/null; then
    log_error "AWS CLI is not installed. Please install it first:"
    echo "pip install awscli"
    exit 1
fi

# Check if AWS credentials are configured
if ! aws sts get-caller-identity &> /dev/null; then
    log_error "AWS credentials not configured. Please run: aws configure"
    exit 1
fi

echo ""
echo "Current AWS Identity:"
aws sts get-caller-identity --output table
echo ""

# Get default VPC ID
DEFAULT_VPC=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query "Vpcs[0].VpcId" --output text)
if [ "$DEFAULT_VPC" == "None" ]; then
    log_error "No default VPC found. Please specify a VPC ID."
    exit 1
fi
log_success "Found default VPC: $DEFAULT_VPC"

# 1. Create Security Group
echo ""
echo "Creating Security Group..."
EXISTING_SG=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=$SECURITY_GROUP_NAME" --query "SecurityGroups[0].GroupId" --output text 2>/dev/null)

if [ "$EXISTING_SG" != "None" ] && [ -n "$EXISTING_SG" ]; then
    log_warning "Security group $SECURITY_GROUP_NAME already exists: $EXISTING_SG"
    SECURITY_GROUP_ID=$EXISTING_SG
else
    SECURITY_GROUP_ID=$(aws ec2 create-security-group \
        --group-name $SECURITY_GROUP_NAME \
        --description "Security group for BioML-bench instances" \
        --vpc-id $DEFAULT_VPC \
        --output text --query 'GroupId')
    log_success "Created security group: $SECURITY_GROUP_ID"
    
    # Add SSH rule (optional - remove for production)
    aws ec2 authorize-security-group-ingress \
        --group-id $SECURITY_GROUP_ID \
        --protocol tcp \
        --port 22 \
        --cidr 0.0.0.0/0 2>/dev/null || true
    log_success "Added SSH ingress rule (port 22)"
    
    # Note: Outbound rules are open by default (needed for SSM and S3)
fi

# 2. Create EC2 Key Pair
echo ""
echo "Creating EC2 Key Pair..."
if aws ec2 describe-key-pairs --key-names $KEY_NAME &> /dev/null; then
    log_warning "Key pair $KEY_NAME already exists"
else
    aws ec2 create-key-pair \
        --key-name $KEY_NAME \
        --query 'KeyMaterial' \
        --output text > ${KEY_NAME}.pem
    chmod 400 ${KEY_NAME}.pem
    log_success "Created key pair: $KEY_NAME (saved to ${KEY_NAME}.pem)"
    log_warning "Keep this key file safe - you'll need it for SSH access!"
fi

# 3. Display summary
echo ""
echo "==================================="
echo "Setup Complete! Resources Created:"
echo "==================================="
echo ""
echo "Security Group:     $SECURITY_GROUP_NAME ($SECURITY_GROUP_ID)"
echo "Key Pair:          $KEY_NAME"
echo ""
echo "Next Steps:"
echo "-----------"
echo "1. Create an AMI with biomlbench and AWS credentials installed:"
echo "   - Launch an EC2 instance (Ubuntu 22.04)"
echo "   - Install biomlbench and all dependencies"
echo "   - Configure AWS credentials for S3 access"
echo "   - Create an AMI from the instance"
echo ""
echo "2. Run the deployment script:"
echo "   python scripts/aws-deploy/deploy-aws.py \\"
echo "     --jobs your-jobs.txt \\"
echo "     --ami ami-xxxxxxxxx \\"
echo "     --key-name $KEY_NAME \\"
echo "     --security-group $SECURITY_GROUP_ID"
echo ""
echo "==================================="

# Optional: Create a config file with the resource IDs
cat > aws-deploy-config.txt << EOF
# AWS Deployment Configuration
# Generated by setup-aws-resources.sh on $(date)

export AWS_DEPLOY_SECURITY_GROUP="$SECURITY_GROUP_ID"
export AWS_DEPLOY_KEY_NAME="$KEY_NAME"

# Example usage:
# python scripts/aws-deploy/deploy-aws.py \\
#   --jobs jobs.txt \\
#   --ami ami-xxxxxxxxx \\
#   --key-name \$AWS_DEPLOY_KEY_NAME \\
#   --security-group \$AWS_DEPLOY_SECURITY_GROUP
EOF

log_success "Configuration saved to aws-deploy-config.txt" 